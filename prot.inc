/* libobject.c */
LitUpvalue *lit_create_upvalue(LitState *state, LitValue *slot);
LitModule *lit_create_module(LitState *state, LitString *name);
LitUserdata *lit_create_userdata(LitState *state, size_t size, bool ispointeronly);
LitRange *lit_create_range(LitState *state, double from, double to);
LitReference *lit_create_reference(LitState *state, LitValue *slot);
void lit_object_destroy(LitState *state, LitObject *object);
void lit_object_destroylistof(LitState *state, LitObject *objects);
LitValue lit_get_function_name(LitVM *vm, LitValue instance);
void lit_open_object_library(LitState *state);
/* ccast.c */
void lit_exprlist_init(LitExprList *array);
void lit_exprlist_destroy(LitState *state, LitExprList *array);
void lit_exprlist_push(LitState *state, LitExprList *array, LitExpression *value);
void lit_paramlist_init(LitParamList *array);
void lit_paramlist_destroy(LitState *state, LitParamList *array);
void lit_paramlist_push(LitState *state, LitParamList *array, LitParameter value);
void lit_paramlist_destroyvalues(LitState *state, LitParamList *parameters);
void lit_ast_destroyexprlist(LitState *state, LitExprList *expressions);
void lit_ast_destroystmtlist(LitState *state, LitExprList *statements);
void lit_ast_destroyexpression(LitState *state, LitExpression *expression);
LitLiteralExpr *lit_ast_make_literalexpr(LitState *state, size_t line, LitValue value);
LitBinaryExpr *lit_ast_make_binaryexpr(LitState *state, size_t line, LitExpression *left, LitExpression *right, LitTokType op);
LitUnaryExpr *lit_ast_make_unaryexpr(LitState *state, size_t line, LitExpression *right, LitTokType op);
LitVarExpr *lit_ast_make_varexpr(LitState *state, size_t line, const char *name, size_t length);
LitAssignExpr *lit_ast_make_assignexpr(LitState *state, size_t line, LitExpression *to, LitExpression *value);
LitCallExpr *lit_ast_make_callexpr(LitState *state, size_t line, LitExpression *callee);
LitGetExpr *lit_ast_make_getexpr(LitState *state, size_t line, LitExpression *where, const char *name, size_t length, bool questionable, bool ignore_result);
LitSetExpr *lit_ast_make_setexpr(LitState *state, size_t line, LitExpression *where, const char *name, size_t length, LitExpression *value);
LitLambdaExpr *lit_ast_make_lambdaexpr(LitState *state, size_t line);
LitArrayExpr *lit_ast_make_arrayexpr(LitState *state, size_t line);
LitObjectExpr *lit_ast_make_objectexpr(LitState *state, size_t line);
LitSubscriptExpr *lit_ast_make_subscriptexpr(LitState *state, size_t line, LitExpression *array, LitExpression *index);
LitThisExpr *lit_ast_make_thisexpr(LitState *state, size_t line);
LitSuperExpr *lit_ast_make_superexpr(LitState *state, size_t line, LitString *method, bool ignore_result);
LitRangeExpr *lit_ast_make_rangeexpr(LitState *state, size_t line, LitExpression *from, LitExpression *to);
LitTernaryExpr *lit_ast_make_ternaryexpr(LitState *state, size_t line, LitExpression *condition, LitExpression *if_branch, LitExpression *else_branch);
LitInterpolationExpr *lit_ast_make_strinterpolexpr(LitState *state, size_t line);
LitReferenceExpr *lit_ast_make_referenceexpr(LitState *state, size_t line, LitExpression *to);
LitExpressionExpr *lit_ast_make_exprstmt(LitState *state, size_t line, LitExpression *expression);
LitBlockExpr *lit_ast_make_blockexpr(LitState *state, size_t line);
LitAssignVarExpr *lit_ast_make_assignvarexpr(LitState *state, size_t line, const char *name, size_t length, LitExpression *init, bool constant);
LitIfExpr *lit_ast_make_ifexpr(LitState *state, size_t line, LitExpression *condition, LitExpression *if_branch, LitExpression *else_branch, LitExprList *elseif_conditions, LitExprList *elseif_branches);
LitWhileExpr *lit_ast_make_whileexpr(LitState *state, size_t line, LitExpression *condition, LitExpression *body);
LitForExpr *lit_ast_make_forexpr(LitState *state, size_t line, LitExpression *init, LitExpression *var, LitExpression *condition, LitExpression *increment, LitExpression *body, bool c_style);
LitContinueExpr *lit_ast_make_continueexpr(LitState *state, size_t line);
LitBreakExpr *lit_ast_make_breakexpr(LitState *state, size_t line);
LitFunctionExpr *lit_ast_make_funcexpr(LitState *state, size_t line, const char *name, size_t length);
LitReturnExpr *lit_ast_make_returnexpr(LitState *state, size_t line, LitExpression *expression);
LitMethodExpr *lit_ast_make_methodexpr(LitState *state, size_t line, LitString *name, bool is_static);
LitClassExpr *lit_ast_make_classexpr(LitState *state, size_t line, LitString *name, LitString *parent);
LitFieldExpr *lit_ast_make_fieldexpr(LitState *state, size_t line, LitString *name, LitExpression *getter, LitExpression *setter, bool is_static);
LitExprList *lit_ast_allocexprlist(LitState *state);
void lit_ast_destroy_allocdexprlist(LitState *state, LitExprList *expressions);
LitExprList *lit_ast_allocate_stmtlist(LitState *state);
void lit_ast_destry_allocdstmtlist(LitState *state, LitExprList *statements);
/* librange.c */
void lit_open_range_library(LitState *state);
/* ccemit.c */
void lit_privlist_init(LitPrivList *array);
void lit_privlist_destroy(LitState *state, LitPrivList *array);
void lit_privlist_push(LitState *state, LitPrivList *array, LitPrivate value);
void lit_loclist_init(LitLocList *array);
void lit_loclist_destroy(LitState *state, LitLocList *array);
void lit_loclist_push(LitState *state, LitLocList *array, LitLocal value);
void lit_emitter_init(LitState *state, LitEmitter *emitter);
void lit_emitter_destroy(LitEmitter *emitter);
LitModule *lit_emitter_modemit(LitEmitter *emitter, LitExprList *statements, LitString *module_name);
/* vm.c */
uint16_t lit_vmexec_readshort(LitExecState *est);
uint8_t lit_vmexec_readbyte(LitExecState *est);
LitValue lit_vmexec_readconstant(LitExecState *est);
LitValue lit_vmexec_readconstantlong(LitExecState *est);
LitString *lit_vmexec_readstring(LitExecState *est);
LitString *lit_vmexec_readstringlong(LitExecState *est);
void lit_vmexec_push(LitFiber *fiber, LitValue v);
LitValue lit_vmexec_pop(LitFiber *fiber);
void lit_vmexec_drop(LitFiber *fiber);
void lit_vmexec_dropn(LitFiber *fiber, int amount);
LitValue lit_vmexec_peek(LitFiber *fiber, short distance);
void lit_vmexec_readframe(LitFiber *fiber, LitExecState *est);
void lit_vmexec_writeframe(LitExecState *est, uint8_t *ip);
void lit_vmexec_resetstack(LitVM *vm);
void lit_vmexec_resetvm(LitState *state, LitVM *vm);
void lit_vm_init(LitState *state, LitVM *vm);
void lit_vm_destroy(LitVM *vm);
void lit_vm_tracestack(LitVM *vm, LitWriter *wr);
bool lit_vm_handleruntimeerror(LitVM *vm, LitString *error_string);
bool lit_vm_vraiseerror(LitVM *vm, const char *format, va_list args);
bool lit_vm_raiseerror(LitVM *vm, const char *format, ...);
bool lit_vm_raiseexitingerror(LitVM *vm, const char *format, ...);
bool lit_vm_callcallable(LitVM *vm, LitFunction *function, LitClosure *closure, uint8_t argc);
const char *lit_vmexec_funcnamefromvalue(LitVM *vm, LitExecState *est, LitValue v);
bool lit_vm_callvalue(LitVM *vm, LitFiber *fiber, LitExecState *est, LitValue callee, uint8_t argc);
LitUpvalue *lit_execvm_captureupvalue(LitState *state, LitValue *local);
void lit_vm_closeupvalues(LitVM *vm, const LitValue *last);
LitInterpretResult lit_vm_execmodule(LitState *state, LitModule *module);
LitInterpretResult lit_vm_execfiber(LitState *state, LitFiber *fiber);
void lit_vmutil_callexitjump(void);
bool lit_vmutil_setexitjump(void);
/* chunk.c */
void lit_chunk_init(LitChunk *chunk);
void lit_chunk_destroy(LitState *state, LitChunk *chunk);
void lit_chunk_push(LitState *state, LitChunk *chunk, uint8_t byte, uint16_t line);
size_t lit_chunk_addconst(LitState *state, LitChunk *chunk, LitValue constant);
size_t lit_chunk_getline(LitChunk *chunk, size_t offset);
void lit_chunk_shrink(LitState *state, LitChunk *chunk);
void lit_chunk_emitbyte(LitState *state, LitChunk *chunk, uint8_t byte);
void lit_chunk_emit2bytes(LitState *state, LitChunk *chunk, uint8_t a, uint8_t b);
void lit_chunk_emitshort(LitState *state, LitChunk *chunk, uint16_t value);
/* libclass.c */
LitClass *lit_create_class(LitState *state, LitString *name);
LitClass *lit_create_classobject(LitState *state, const char *name);
LitField *lit_create_field(LitState *state, LitObject *getter, LitObject *setter);
LitInstance *lit_create_instance(LitState *state, LitClass *klass);
void lit_class_bindconstructor(LitState *state, LitClass *cl, LitNativeMethodFn fn);
LitNativeMethod *lit_class_bindmethod(LitState *state, LitClass *cl, const char *name, LitNativeMethodFn fn);
LitPrimitiveMethod *lit_class_bindprimitive(LitState *state, LitClass *cl, const char *name, LitPrimitiveMethodFn fn);
LitNativeMethod *lit_class_bindstaticmethod(LitState *state, LitClass *cl, const char *name, LitNativeMethodFn fn);
LitPrimitiveMethod *lit_class_bindstaticprimitive(LitState *state, LitClass *cl, const char *name, LitPrimitiveMethodFn fn);
void lit_class_setstaticfield(LitState *state, LitClass *cl, const char *name, LitValue val);
LitField *lit_class_bindgetset(LitState *state, LitClass *cl, const char *name, LitNativeMethodFn getfn, LitNativeMethodFn setfn, bool isstatic);
void lit_class_inheritfrom(LitState *state, LitClass *current, LitClass *other);
void lit_open_class_library(LitState *state);
/* ccprepr.c */
void lit_preproc_init(LitState *state, LitPreprocessor *preprocessor);
void lit_preproc_destroy(LitPreprocessor *preprocessor);
void lit_preproc_setdef(LitState *state, const char *name);
void lit_preproc_override(char *source, int length);
bool lit_preproc_run(LitPreprocessor *preprocessor, char *source);
/* libfiber.c */
LitFiber *lit_create_fiber(LitState *state, LitModule *module, LitFunction *function);
void lit_ensure_fiber_stack(LitState *state, LitFiber *fiber, size_t needed);
void lit_open_fiber_library(LitState *state);
/* libfs.c */
bool lit_dir_open(LitDirReader *rd, const char *path);
bool lit_dir_read(LitDirReader *rd, LitDirItem *itm);
bool lit_dir_close(LitDirReader *rd);
char *lit_util_readfile(const char *path, size_t *dlen);
bool lit_file_exists(const char *path);
size_t lit_write_uint8_t(FILE *file, uint8_t byte);
size_t lit_write_uint16_t(FILE *file, uint16_t byte);
size_t lit_write_uint32_t(FILE *file, uint32_t byte);
size_t lit_write_string(FILE *file, LitString *string);
uint8_t lit_read_uint8_t(FILE *file);
uint16_t lit_read_uint16_t(FILE *file);
uint32_t lit_read_uint32_t(FILE *file);
LitString *lit_read_string(LitState *state, FILE *file);
void lit_init_emulated_file(LitEmulatedFile *file, const char *source, size_t len);
uint8_t lit_read_euint8_t(LitEmulatedFile *file);
uint16_t lit_read_euint16_t(LitEmulatedFile *file);
uint32_t lit_read_euint32_t(LitEmulatedFile *file);
double lit_read_edouble(LitEmulatedFile *file);
LitString *lit_read_estring(LitState *state, LitEmulatedFile *file);
LitModule *lit_load_module(LitState *state, const char *input, size_t len);
void cleanup_file(LitState *state, LitUserdata *data, bool mark);
void lit_open_file_library(LitState *state);
/* ccparser.c */
const char *lit_parser_token2name(int t);
void lit_parser_init(LitState *state, LitParser *parser);
void lit_parser_destroy(LitParser *parser);
bool lit_parser_parsesource(LitParser *parser, const char *file_name, const char *source, LitExprList *statements);
/* util.c */
uint64_t pack754(long double f, unsigned bits, unsigned expbits);
long double unpack754(uint64_t i, unsigned bits, unsigned expbits);
double lit_util_uinttofloat(unsigned int val);
unsigned int lit_util_floattouint(double val);
int lit_util_doubletoint(double n);
int lit_util_numbertoint32(double n);
unsigned int lit_util_numbertouint32(double n);
int lit_util_closestpowof2(int n);
char *lit_util_patchfilename(char *file_name);
char *lit_util_copystring(const char *string);
/* error.c */
const char *lit_error_getformatstring(LitError e);
LitString *lit_vformat_error(LitState *state, size_t line, LitError lit_emitter_raiseerror, va_list args);
LitString *lit_format_error(LitState *state, size_t line, LitError lit_emitter_raiseerror, ...);
/* value.c */
LitValue lit_value_objectvalue_actual(uintptr_t obj);
LitObject *lit_value_asobject(LitValue v);
LitValue lit_bool_to_value(LitState *state, bool b);
bool lit_value_isbool(LitValue v);
bool lit_value_isobject(LitValue v);
LitObjType lit_value_type(LitValue v);
double lit_value_asnumber(LitValue v);
LitValue lit_value_numbertovalue(LitState *state, double num);
bool lit_value_isnumber(LitValue v);
bool lit_value_compare(LitState *state, const LitValue a, const LitValue b);
LitString *lit_value_tostring(LitState *state, LitValue object);
double lit_value_checknumber(LitVM *vm, LitValue *args, uint8_t arg_count, uint8_t id);
double lit_value_getnumber(LitVM *vm, LitValue *args, uint8_t arg_count, uint8_t id, double def);
bool lit_value_checkbool(LitVM *vm, LitValue *args, uint8_t arg_count, uint8_t id);
bool lit_value_getbool(LitVM *vm, LitValue *args, uint8_t arg_count, uint8_t id, bool def);
const char *lit_value_checkstring(LitVM *vm, LitValue *args, uint8_t arg_count, uint8_t id);
const char *lit_value_getstring(LitVM *vm, LitValue *args, uint8_t arg_count, uint8_t id, const char *def);
LitString *lit_value_checkobjstring(LitVM *vm, LitValue *args, uint8_t arg_count, uint8_t id);
LitInstance *lit_value_checkinstance(LitVM *vm, LitValue *args, uint8_t arg_count, uint8_t id);
LitValue *lit_value_checkreference(LitVM *vm, LitValue *args, uint8_t arg_count, uint8_t id);
void lit_value_ensurebool(LitVM *vm, LitValue value, const char *lit_emitter_raiseerror);
void lit_value_ensurestring(LitVM *vm, LitValue value, const char *lit_emitter_raiseerror);
void lit_value_ensurenumber(LitVM *vm, LitValue value, const char *lit_emitter_raiseerror);
void lit_value_ensureobjtype(LitVM *vm, LitValue value, LitObjType type, const char *lit_emitter_raiseerror);
LitValue lit_value_callnew(LitVM *vm, const char *name, LitValue *args, size_t argc, bool ignfiber);
/* libmap.c */
void lit_table_init(LitState *state, LitTable *table);
void lit_table_destroy(LitState *state, LitTable *table);
bool lit_table_set(LitState *state, LitTable *table, LitString *key, LitValue value);
bool lit_table_get(LitTable *table, LitString *key, LitValue *value);
bool lit_table_get_slot(LitTable *table, LitString *key, LitValue **value);
bool lit_table_delete(LitTable *table, LitString *key);
LitString *lit_table_find_string(LitTable *table, const char *chars, size_t length, uint32_t hash);
void lit_table_add_all(LitState *state, LitTable *from, LitTable *to);
void lit_table_removewhite(LitTable *table);
int util_table_iterator(LitTable *table, int number);
LitValue util_table_iterator_key(LitTable *table, int index);
LitMap *lit_create_map(LitState *state);
bool lit_map_set(LitState *state, LitMap *map, LitString *key, LitValue value);
bool lit_map_get(LitMap *map, LitString *key, LitValue *value);
bool lit_map_delete(LitMap *map, LitString *key);
void lit_map_add_all(LitState *state, LitMap *from, LitMap *to);
void lit_open_map_library(LitState *state);
/* main.c */
int exitstate(LitState *state, LitResult result);
void interupt_handler(int signal_id);
int main(int argc, char *argv[]);
int oldmain(int argc, const char *argv[]);
/* gcmem.c */
LitObject *lit_gcmem_allocobject(LitState *state, size_t size, LitObjType type, bool islight);
void *lit_gcmem_memrealloc(LitState *state, void *pointer, size_t old_size, size_t new_size);
void lit_gcmem_marktable(LitVM *vm, LitTable *table);
void lit_gcmem_markobject(LitVM *vm, LitObject *object);
void lit_gcmem_markvalue(LitVM *vm, LitValue value);
void lit_gcmem_vmmarkroots(LitVM *vm);
void lit_gcmem_markarray(LitVM *vm, LitValueList *array);
void lit_gcmem_vmblackobject(LitVM *vm, LitObject *object);
void lit_gcmem_vmtracerefs(LitVM *vm);
void lit_gcmem_vmsweep(LitVM *vm);
uint64_t lit_gcmem_collectgarbage(LitVM *vm);
void lit_open_gc_library(LitState *state);
/* debug.c */
void lit_disassemble_module(LitState *state, LitModule *module, const char *source);
void lit_disassemble_chunk(LitState *state, LitChunk *chunk, const char *name, const char *source);
size_t lit_disassemble_instruction(LitState *state, LitChunk *chunk, size_t offset, const char *source);
void lit_trace_frame(LitFiber *fiber, LitWriter *wr);
/* ccscan.c */
void lit_bytelist_init(LitByteList *bl);
void lit_bytelist_destroy(LitState *state, LitByteList *bl);
void lit_bytelist_push(LitState *state, LitByteList *bl, uint8_t value);
void lit_lex_init(LitState *state, LitScanner *scanner, const char *file_name, const char *source);
LitToken lit_lex_rollback(LitScanner *scanner);
LitToken lit_lex_scantoken(LitScanner *scanner);
/* libstring.c */
char *itoa(int value, char *result, int base);
char *lit_util_inttostring(char *dest, size_t n, int x);
uint32_t lit_util_hashstring(const char *key, size_t length);
int lit_util_decodenumbytes(uint8_t byte);
int lit_ustring_length(LitString *string);
LitString *lit_ustring_codepointat(LitState *state, LitString *string, uint32_t index);
LitString *lit_ustring_fromcodepoint(LitState *state, int value);
LitString *lit_ustring_fromrange(LitState *state, LitString *source, int start, uint32_t count);
int lit_util_encodenumbytes(int value);
int lit_ustring_encode(int value, uint8_t *bytes);
int lit_ustring_decode(const uint8_t *bytes, uint32_t length);
int lit_util_ucharoffset(char *str, int index);
LitString *lit_string_makeempty(LitState *state, size_t length, bool reuse);
LitString *lit_string_makelen(LitState *state, char *chars, size_t length, uint32_t hash, bool wassds, bool reuse);
void lit_state_regstring(LitState *state, LitString *string);
LitString *lit_string_take(LitState *state, char *chars, size_t length, bool wassds);
LitString *lit_string_copy(LitState *state, const char *chars, size_t length);
const char *lit_string_getdata(LitString *ls);
size_t lit_string_getlength(LitString *ls);
void lit_string_appendlen(LitString *ls, const char *s, size_t len);
void lit_string_appendobj(LitString *ls, LitString *other);
void lit_string_appendchar(LitString *ls, char ch);
LitValue lit_string_numbertostring(LitState *state, double value);
LitValue lit_string_format(LitState *state, const char *format, ...);
bool lit_string_equal(LitState *state, LitString *a, LitString *b);
bool check_fmt_arg(LitVM *vm, char *buf, size_t ai, size_t argc, LitValue *argv, const char *fmttext);
void lit_open_string_library(LitState *state);
/* libcore.c */
void lit_open_libraries(LitState *state);
void util_custom_quick_sort(LitVM *vm, LitValue *l, int length, LitValue callee);
bool util_is_fiber_done(LitFiber *fiber);
void util_run_fiber(LitVM *vm, LitFiber *fiber, LitValue *argv, size_t argc, bool catcher);
void util_basic_quick_sort(LitState *state, LitValue *clist, int length);
bool util_interpret(LitVM *vm, LitModule *module);
bool util_test_file_exists(const char *filename);
bool util_attempt_to_require(LitVM *vm, LitValue *argv, size_t argc, const char *path, bool ignore_previous, bool folders);
bool util_attempt_to_require_combined(LitVM *vm, LitValue *argv, size_t argc, const char *a, const char *b, bool ignore_previous);
LitValue util_invalid_constructor(LitVM *vm, LitValue instance, size_t argc, LitValue *argv);
void lit_open_core_library(LitState *state);
/* state.c */
void lit_enable_compilation_time_measurement(void);
LitState *lit_make_state(void);
int64_t lit_destroy_state(LitState *state);
void lit_api_init(LitState *state);
void lit_api_destroy(LitState *state);
LitValue lit_state_getglobalvalue(LitState *state, LitString *name);
LitFunction *lit_state_getglobalfunction(LitState *state, LitString *name);
void lit_state_setglobal(LitState *state, LitString *name, LitValue value);
bool lit_state_hasglobal(LitState *state, LitString *name);
void lit_state_defnativefunc(LitState *state, const char *name, LitNativeFunctionFn native);
void lit_state_defnativeprimitive(LitState *state, const char *name, LitNativePrimitiveFn native);
LitValue lit_state_getinstancemethod(LitState *state, LitValue callee, LitString *mthname);
LitInterpretResult lit_state_callinstancemethod(LitState *state, LitValue callee, LitString *mthname, LitValue *argv, size_t argc);
LitValue lit_state_getfield(LitState *state, LitTable *table, const char *name);
LitValue lit_state_getmapfield(LitState *state, LitMap *map, const char *name);
void lit_state_setfield(LitState *state, LitTable *table, const char *name, LitValue value);
void lit_state_setmapfield(LitState *state, LitMap *map, const char *name, LitValue value);
bool lit_state_ensurefiber(LitVM *vm, LitFiber *fiber);
LitInterpretResult lit_state_callfunction(LitState *state, LitFunction *callee, LitValue *argv, uint8_t argc, bool ignfiber);
LitInterpretResult lit_state_callclosure(LitState *state, LitClosure *callee, LitValue *argv, uint8_t argc, bool ignfiber);
LitInterpretResult lit_state_callmethod(LitState *state, LitValue instance, LitValue callee, LitValue *argv, uint8_t argc, bool ignfiber);
LitInterpretResult lit_state_callvalue(LitState *state, LitValue callee, LitValue *argv, uint8_t argc, bool ignfiber);
LitInterpretResult lit_state_findandcallmethod(LitState *state, LitValue callee, LitString *method_name, LitValue *argv, uint8_t argc, bool ignfiber);
void lit_state_pushroot(LitState *state, LitObject *object);
void lit_state_pushvalueroot(LitState *state, LitValue value);
LitValue lit_state_peekroot(LitState *state, uint8_t distance);
void lit_state_poproot(LitState *state);
void lit_state_poproots(LitState *state, uint8_t amount);
LitClass *lit_state_getclassfor(LitState *state, LitValue value);
LitModule *lit_state_compilemodule(LitState *state, LitString *module_name, const char *code, size_t len);
LitModule *lit_state_getmodule(LitState *state, const char *name);
LitInterpretResult lit_state_execsource(LitState *state, const char *module_name, const char *code, size_t len);
LitInterpretResult lit_state_internexecsource(LitState *state, LitString *module_name, const char *code, size_t len);
bool lit_state_compileandsave(LitState *state, char *files[], size_t num_files, const char *output_file);
LitInterpretResult lit_state_execfile(LitState *state, const char *file);
LitInterpretResult lit_state_dumpfile(LitState *state, const char *file);
void lit_state_raiseerror(LitState *state, LitErrType type, const char *message, ...);
void lit_state_printf(LitState *state, const char *message, ...);
/* libarray.c */
void lit_datalist_init(LitDataList *dl, size_t typsz);
void lit_datalist_destroy(LitState *state, LitDataList *dl);
size_t lit_datalist_count(LitDataList *dl);
size_t lit_datalist_size(LitDataList *dl);
size_t lit_datalist_capacity(LitDataList *dl);
void lit_datalist_clear(LitDataList *dl);
void lit_datalist_setcount(LitDataList *dl, size_t nc);
void lit_datalist_deccount(LitDataList *dl);
intptr_t lit_datalist_get(LitDataList *dl, size_t idx);
intptr_t lit_datalist_set(LitDataList *dl, size_t idx, intptr_t val);
void lit_datalist_push(LitState *state, LitDataList *dl, intptr_t value);
void lit_datalist_ensuresize(LitState *state, LitDataList *dl, size_t size);
void lit_vallist_init(LitValueList *vl);
void lit_vallist_destroy(LitState *state, LitValueList *vl);
size_t lit_vallist_size(LitValueList *vl);
size_t lit_vallist_count(LitValueList *vl);
size_t lit_vallist_capacity(LitValueList *vl);
void lit_vallist_setcount(LitValueList *vl, size_t nc);
void lit_vallist_clear(LitValueList *vl);
void lit_vallist_deccount(LitValueList *vl);
void lit_vallist_ensuresize(LitState *state, LitValueList *values, size_t size);
LitValue lit_vallist_set(LitValueList *vl, size_t idx, LitValue val);
LitValue lit_vallist_get(LitValueList *vl, size_t idx);
void lit_vallist_push(LitState *state, LitValueList *vl, LitValue value);
LitArray *lit_create_array(LitState *state);
size_t lit_array_count(LitArray *arr);
LitValue lit_array_pop(LitState *state, LitArray *arr);
int lit_array_indexof(LitArray *array, LitValue value);
LitValue lit_array_removeat(LitArray *array, size_t index);
void lit_array_push(LitState *state, LitArray *array, LitValue val);
LitValue lit_array_get(LitState *state, LitArray *array, size_t idx);
LitArray *lit_array_splice(LitState *state, LitArray *oa, int from, int to);
void lit_open_array_library(LitState *state);
/* libmodule.c */
void lit_open_module_library(LitState *state);
/* libmath.c */
void lit_open_math_library(LitState *state);
/* ccopt.c */
void lit_astopt_optdbg(const char *fmt, ...);
void lit_varlist_init(LitVarList *array);
void lit_varlist_destroy(LitState *state, LitVarList *array);
void lit_varlist_push(LitState *state, LitVarList *array, LitVariable value);
void lit_astopt_init(LitState *state, LitOptimizer *optimizer);
void lit_astopt_optast(LitOptimizer *optimizer, LitExprList *statements);
bool lit_astopt_isoptenabled(LitOptimization optimization);
void lit_astopt_setoptenabled(LitOptimization optimization, bool enabled);
void lit_astopt_setalloptenabled(bool enabled);
void lit_astopt_setoptlevel(LitOptLevel level);
const char *lit_astopt_getoptname(LitOptimization optimization);
const char *lit_astopt_getoptdescr(LitOptimization optimization);
const char *lit_astopt_getoptleveldescr(LitOptLevel level);
/* writer.c */
void lit_writer_init_file(LitState *state, LitWriter *wr, FILE *fh, bool forceflush);
void lit_writer_init_string(LitState *state, LitWriter *wr);
void lit_writer_writebyte(LitWriter *wr, int byte);
void lit_writer_writestringl(LitWriter *wr, const char *str, size_t len);
void lit_writer_writestring(LitWriter *wr, const char *str);
void lit_writer_writeformat(LitWriter *wr, const char *fmt, ...);
LitString *lit_writer_get_string(LitWriter *wr);
void lit_towriter_object(LitState *state, LitWriter *wr, LitValue value);
void lit_towriter_value(LitState *state, LitWriter *wr, LitValue value);
const char *lit_tostring_typename(LitValue value);
const char *lit_tostring_exprtype(LitExprType t);
const char *lit_tostring_optok(LitTokType t);
void lit_towriter_expr(LitState *state, LitWriter *wr, LitExpression *expr);
void lit_towriter_ast(LitState *state, LitWriter *wr, LitExprList *exlist);
/* libfunc.c */
LitFunction *lit_create_function(LitState *state, LitModule *module);
LitClosure *lit_create_closure(LitState *state, LitFunction *function);
LitNativeFunction *lit_create_native_function(LitState *state, LitNativeFunctionFn function, LitString *name);
LitNativePrimFunction *lit_create_native_primitive(LitState *state, LitNativePrimitiveFn function, LitString *name);
LitNativeMethod *lit_create_native_method(LitState *state, LitNativeMethodFn method, LitString *name);
LitPrimitiveMethod *lit_create_primitive_method(LitState *state, LitPrimitiveMethodFn method, LitString *name);
LitBoundMethod *lit_create_bound_method(LitState *state, LitValue receiver, LitValue method);
bool lit_is_callable_function(LitValue value);
void lit_open_function_library(LitState *state);
