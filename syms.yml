  # void lit_exprlist_init(LitExprList *array);
  "lit_exprlist_init": "lit_exprlist_init"

  # void lit_exprlist_destroy(LitState *state, LitExprList *array);
  "lit_exprlist_destroy": "lit_exprlist_destroy"

  # void lit_exprlist_push(LitState *state, LitExprList *array, LitExpression *value);
  "lit_exprlist_push": "lit_exprlist_push"

  # void lit_paramlist_init(LitParamList *array);
  "lit_paramlist_init": "lit_paramlist_init"

  # void lit_paramlist_destroy(LitState *state, LitParamList *array);
  "lit_paramlist_destroy": "lit_paramlist_destroy"

  # void lit_paramlist_push(LitState *state, LitParamList *array, LitParameter value);
  "lit_paramlist_push": "lit_paramlist_push"

  # void lit_paramlist_freevalues(LitState *state, LitParamList *parameters);
  "lit_paramlist_freevalues": "lit_paramlist_destroyvalues"

  # void free_expressions(LitState *state, LitExprList *expressions);
  "free_expressions": "lit_ast_destroyexprlist"

  # void internal_free_statements(LitState *state, LitExprList *statements);
  "internal_free_statements": "lit_ast_destroystmtlist"

  # void lit_free_expression(LitState *state, LitExpression *expression);
  "lit_free_expression": "lit_ast_destroyexpression"

  # static LitExpression * allocate_expression(LitState *state, uint64_t line, size_t size, LitExprType type);
  "allocate_expression": "lit_ast_allocexpr"

  # LitLiteralExpr * lit_create_literal_expression(LitState *state, size_t line, LitValue value);
  "lit_create_literal_expression": "lit_ast_make_literalexpr"

  # LitBinaryExpr * lit_create_binary_expression(LitState *state, size_t line, LitExpression *left, LitExpression *right, LitTokType op);
  "lit_create_binary_expression": "lit_ast_make_binaryexpr"

  # LitUnaryExpr * lit_create_unary_expression(LitState *state, size_t line, LitExpression *right, LitTokType op);
  "lit_create_unary_expression": "lit_ast_make_unaryexpr"

  # LitVarExpr * lit_create_var_expression(LitState *state, size_t line, const char *name, size_t length);
  "lit_create_var_expression": "lit_ast_make_varexpr"

  # LitAssignExpr * lit_create_assign_expression(LitState *state, size_t line, LitExpression *to, LitExpression *value);
  "lit_create_assign_expression": "lit_ast_make_assignexpr"

  # LitCallExpr * lit_create_call_expression(LitState *state, size_t line, LitExpression *callee);
  "lit_create_call_expression": "lit_ast_make_callexpr"

  # LitGetExpr * lit_create_get_expression(LitState *state, size_t line, LitExpression *where, const char *name, size_t length, _Bool questionable, _Bool ignore_result);
  "lit_create_get_expression": "lit_ast_make_getexpr"

  # LitSetExpr * lit_create_set_expression(LitState *state, size_t line, LitExpression *where, const char *name, size_t length, LitExpression *value);
  "lit_create_set_expression": "lit_ast_make_setexpr"

  # LitLambdaExpr * lit_create_lambda_expression(LitState *state, size_t line);
  "lit_create_lambda_expression": "lit_ast_make_lambdaexpr"

  # LitArrayExpr * lit_create_array_expression(LitState *state, size_t line);
  "lit_create_array_expression": "lit_ast_make_arrayexpr"

  # LitObjectExpr * lit_create_object_expression(LitState *state, size_t line);
  "lit_create_object_expression": "lit_ast_make_objectexpr"

  # LitSubscriptExpr * lit_create_subscript_expression(LitState *state, size_t line, LitExpression *array, LitExpression *index);
  "lit_create_subscript_expression": "lit_ast_make_subscriptexpr"

  # LitThisExpr * lit_create_this_expression(LitState *state, size_t line);
  "lit_create_this_expression": "lit_ast_make_thisexpr"

  # LitSuperExpr * lit_create_super_expression(LitState *state, size_t line, LitString *method, _Bool ignore_result);
  "lit_create_super_expression": "lit_ast_make_superexpr"

  # LitRangeExpr * lit_create_range_expression(LitState *state, size_t line, LitExpression *from, LitExpression *to);
  "lit_create_range_expression": "lit_ast_make_rangeexpr"

  # LitTernaryExpr * lit_create_ternary_expression(LitState *state, size_t line, LitExpression *condition, LitExpression *if_branch, LitExpression *else_branch);
  "lit_create_ternary_expression": "lit_ast_make_ternaryexpr"

  # LitInterpolationExpr * lit_create_interpolation_expression(LitState *state, size_t line);
  "lit_create_interpolation_expression": "lit_ast_make_strinterpolexpr"

  # LitReferenceExpr * lit_create_reference_expression(LitState *state, size_t line, LitExpression *to);
  "lit_create_reference_expression": "lit_ast_make_referenceexpr"

  # static LitExpression * allocate_statement(LitState *state, uint64_t line, size_t size, LitExprType type);
  "allocate_statement": "lit_ast_allocstmt"

  # LitExpressionExpr * lit_create_expression_statement(LitState *state, size_t line, LitExpression *expression);
  "lit_create_expression_statement": "lit_ast_make_exprstmt"

  # LitBlockExpr * lit_create_block_statement(LitState *state, size_t line);
  "lit_create_block_statement": "lit_ast_make_blockexpr"

  # LitAssignVarExpr * lit_create_assignvar_statement(LitState *state, size_t line, const char *name, size_t length, LitExpression *init, _Bool constant);
  "lit_create_assignvar_statement": "lit_ast_make_assignvarexpr"

  # LitIfExpr * lit_create_if_statement(LitState *state, size_t line, LitExpression *condition, LitExpression *if_branch, LitExpression *else_branch, LitExprList *elseif_conditions, LitExprList *elseif_branches);
  "lit_create_if_statement": "lit_ast_make_ifexpr"

  # LitWhileExpr * lit_create_while_statement(LitState *state, size_t line, LitExpression *condition, LitExpression *body);
  "lit_create_while_statement": "lit_ast_make_whileexpr"

  # LitForExpr * lit_create_for_statement(LitState *state, size_t line, LitExpression *init, LitExpression *var, LitExpression *condition, LitExpression *increment, LitExpression *body, _Bool c_style);
  "lit_create_for_statement": "lit_ast_make_forexpr"

  # LitContinueExpr * lit_create_continue_statement(LitState *state, size_t line);
  "lit_create_continue_statement": "lit_ast_make_continueexpr"

  # LitBreakExpr * lit_create_break_statement(LitState *state, size_t line);
  "lit_create_break_statement": "lit_ast_make_breakexpr"

  # LitFunctionExpr * lit_create_function_statement(LitState *state, size_t line, const char *name, size_t length);
  "lit_create_function_statement": "lit_ast_make_funcexpr"

  # LitReturnExpr * lit_create_return_statement(LitState *state, size_t line, LitExpression *expression);
  "lit_create_return_statement": "lit_ast_make_returnexpr"

  # LitMethodExpr * lit_create_method_statement(LitState *state, size_t line, LitString *name, _Bool is_static);
  "lit_create_method_statement": "lit_ast_make_methodexpr"

  # LitClassExpr * lit_create_class_statement(LitState *state, size_t line, LitString *name, LitString *parent);
  "lit_create_class_statement": "lit_ast_make_classexpr"

  # LitFieldExpr * lit_create_field_statement(LitState *state, size_t line, LitString *name, LitExpression *getter, LitExpression *setter, _Bool is_static);
  "lit_create_field_statement": "lit_ast_make_fieldexpr"

  # LitExprList * lit_allocate_expressions(LitState *state);
  "lit_allocate_expressions": "lit_ast_allocexprlist"

  # void lit_free_allocated_expressions(LitState *state, LitExprList *expressions);
  "lit_free_allocated_expressions": "lit_ast_destroy_allocdexprlist"

  # LitExprList * lit_allocate_statements(LitState *state);
  "lit_allocate_statements": "lit_ast_allocate_stmtlist"

  # void lit_free_allocated_statements(LitState *state, LitExprList *statements);
  "lit_free_allocated_statements": "lit_ast_destry_allocdstmtlist"

